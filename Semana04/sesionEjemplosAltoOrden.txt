alumnos@sc310:~/CursoPF/Semana04$ ghci
GHCi, version 8.6.5: http://www.haskell.org/ghc/  :? for help
Prelude> map sqr [1,2,3,4]

<interactive>:1:5: error:
    • Variable not in scope: sqr :: Integer -> b
    • Perhaps you meant ‘sqrt’ (imported from Prelude)
Prelude> map (\x -> x*x)  [1,2,3,4]
[1,4,9,16]
Prelude> map (\x -> x*x*x)  [1,2,3,4]
[1,8,27,64]
Prelude> map (\x -> x*x*x+1)  [1,2,3,4]
[2,9,28,65]
Prelude> map (2:) [[1,2],[2,3],[3,4]]
[[2,1,2],[2,2,3],[2,3,4]]
Prelude> map ('h':) ["ho","mo","nana"]
["hho","hmo","hnana"]
Prelude> map ("ho "++) ["ho","mo","nana"]
["ho ho","ho mo","ho nana"]
Prelude> map ord "homonana"

<interactive>:8:5: error:
    • Variable not in scope: ord :: Char -> b

        ‘or’ (imported from Prelude), ‘odd’ (imported from Prelude)
Prelude> :module Data.Char
Prelude Data.Char> map ord "este es un mensaje secreto""

<interactive>:10:38: error:
    lexical error in string/character literal at end of input
Prelude Data.Char> map ord "este es un mensaje secreto"
[101,115,116,101,32,101,115,32,117,110,32,109,101,110,115,97,106,101,32,115,101,99,114,101,116,111]
Prelude Data.Char> map (+1) (map ord "este es un mensaje secreto")
[102,116,117,102,33,102,116,33,118,111,33,110,102,111,116,98,107,102,33,116,102,100,115,102,117,112]
Prelude Data.Char> map chr (map (+1) (map ord "este es un mensaje secreto"))
"ftuf!ft!vo!nfotbkf!tfdsfup"
Prelude Data.Char> ord 'a'
97
Prelude Data.Char> chr 97
'a'
Prelude Data.Char> map chr (map (+1) (map ord "este es un mensaje secreto"))
"ftuf!ft!vo!nfotbkf!tfdsfup"
Prelude Data.Char> map ord (map chr (map (+1) (map ord "este es un mensaje secreto")))
[102,116,117,102,33,102,116,33,118,111,33,110,102,111,116,98,107,102,33,116,102,100,115,102,117,112]
Prelude Data.Char> map (\x -> x-1) (map ord (map chr (map (+1) (map ord "este es un mensaje secreto"))))
[101,115,116,101,32,101,115,32,117,110,32,109,101,110,115,97,106,101,32,115,101,99,114,101,116,111]
Prelude Data.Char> map chr $ map (\x -> x-1) (map ord (map chr (map (+1) (map ord "este es un mensaje secreto"))))
"este es un mensaje secreto"
Prelude Data.Char> map (chr . (\x -> x-1) . ord . chr . (+1) . ord) "este es un mensaje secreto"
"este es un mensaje secreto"
Prelude Data.Char> filter even [1,2,3,4,5,6,5,4,3,2,1]
[2,4,6,4,2]
Prelude Data.Char> filter odd [1,2,3,4,5,6,5,4,3,2,1]
[1,3,5,5,3,1]
Prelude Data.Char> filter (<3) [1,2,3,4,5,6,5,4,3,2,1]
[1,2,2,1]
Prelude Data.Char> filter (>3) [1,2,3,4,5,6,5,4,3,2,1]
[4,5,6,5,4]
Prelude Data.Char> filter ((>3) && (<5)) [1,2,3,4,5,6,5,4,3,2,1]

<interactive>:25:9: error:
    • Couldn't match expected type ‘a -> Bool’ with actual type ‘Bool’
    • Possible cause: ‘(&&)’ is applied to too many arguments
      In the first argument of ‘filter’, namely ‘((> 3) && (< 5))’
      In the expression: filter ((> 3) && (< 5)) [1, 2, 3, 4, ....]
      In an equation for ‘it’:
          it = filter ((> 3) && (< 5)) [1, 2, 3, ....]
    • Relevant bindings include it :: [a] (bound at <interactive>:25:1)

Prelude Data.Char> filter (\x -> (x>3) and (x<5)) [1,2,3,4,5,6,5,4,3,2,1]

Prelude Data.Char> filter (\x -> ((x>3) || (x<5))) [1,2,3,4,5,6,5,4,3,2,1]
[1,2,3,4,5,6,5,4,3,2,1]
Prelude Data.Char> filter (\x -> ((x>3) && (x<5))) [1,2,3,4,5,6,5,4,3,2,1]
[4,4]
Prelude Data.Char> filter (==5) [5,5,5,1]
[5,5,5]
Prelude Data.Char> filter (==5) [5,5,4+1,1]
[5,5,5]
Prelude Data.Char> foldr (*) 1 [1,2,3,4,5]
120
Prelude Data.Char> scanr (*) 1 [1,2,3,4,5]
[120,120,60,20,5,1]
Prelude Data.Char> scanl (*) 1 [1,2,3,4,5]
[1,1,2,6,24,120]
Prelude Data.Char> scanl (*) 1 [1,2,3,4,5,6,7,8,9,10]
[1,1,2,6,24,120,720,5040,40320,362880,3628800]
Prelude Data.Char> scanr (*) 1 [1,2,3,4,5,6,7,8,9,10]
[3628800,3628800,1814400,604800,151200,30240,5040,720,90,10,1]
Prelude Data.Char> reverse (scanr (*) 1 [1,2,3,4,5,6,7,8,9,10])
[1,10,90,720,5040,30240,151200,604800,1814400,3628800,3628800]
Prelude Data.Char> scanl (*) 1 [1,2,3,4,5,6,7,8,9,10]
[1,1,2,6,24,120,720,5040,40320,362880,3628800]
Prelude Data.Char> last (scanl (*) 1 [1,2,3,4,5,6,7,8,9,10])
3628800
Prelude Data.Char> foldl (*) 1 [1,2,3,4,5,6,7,8,9,10]
3628800
Prelude Data.Char>  foldl (++) "" ["hola", "ya", "basta", "de", "sufrir"]]

<interactive>:41:55: error: parse error on input ‘]’
Prelude Data.Char>  foldl (++) "" ["hola", "ya", "basta", "de", "sufrir"]
"holayabastadesufrir"
Prelude Data.Char> last (scanl (++) "" ["hola", "ya", "basta", "de", "sufrir"])
"holayabastadesufrir"
Prelude Data.Char> scanl (++) "" ["hola", "ya", "basta", "de", "sufrir"]
["","hola","holaya","holayabasta","holayabastade","holayabastadesufrir"]
Prelude Data.Char> zip "micaelagalindo" "antoniodeleon"
[('m','a'),('i','n'),('c','t'),('a','o'),('e','n'),('l','i'),('a','o'),('g','d'),('a','e'),('l','l'),('i','e'),('n','o'),('d','n')]
Prelude Data.Char> :i unzip
unzip :: [(a, b)] -> ([a], [b]) 	-- Defined in ‘GHC.List’
Prelude Data.Char> unzip (zip "micaelagalindo" "antoniodeleon")
("micaelagalind","antoniodeleon")
Prelude Data.Char> zip [1,2,3] [3,4,5,6,7]
[(1,3),(2,4),(3,5)]
Prelude Data.Char> zipWith (*) [1,2,3] [3,4,5,6,7]
[3,8,15]
Prelude Data.Char> zipWith (+) [1,2,3] [3,4,5,6,7]
[4,6,8]
Prelude Data.Char> iterate (\x -> x) 1

Prelude Data.Char> take 12 (iterate (\x -> x*x) 1) 
[1,1,1,1,1,1,1,1,1,1,1,1]
Prelude Data.Char> take 5 (iterate (\x -> x*x) 2) 
[2,4,16,256,65536]
Prelude Data.Char> take 7 (iterate (\x -> x*x) 2) 
[2,4,16,256,65536,4294967296,18446744073709551616]
Prelude Data.Char> take 7 (iterate (\x -> x+3) 2) 
[2,5,8,11,14,17,20]
Prelude Data.Char> take 17 (iterate (\x -> x+3) 2) 
[2,5,8,11,14,17,20,23,26,29,32,35,38,41,44,47,50]
Prelude Data.Char> 